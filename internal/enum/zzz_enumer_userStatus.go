// Code generated by "enumer -type=UserStatus -trimprefix=UserStatus -yaml -json -text -sql -transform=snake --output=zzz_enumer_UserStatus.go"; DO NOT EDIT.

package enum

import (
	"database/sql/driver"
	"encoding/json"
	"fmt"
	"strings"
)

const _UserStatusName = "unverifiedenabledisablefrozen"

var _UserStatusIndex = [...]uint8{0, 10, 16, 23, 29}

const _UserStatusLowerName = "unverifiedenabledisablefrozen"

func (i UserStatus) String() string {
	if i < 0 || i >= UserStatus(len(_UserStatusIndex)-1) {
		return fmt.Sprintf("UserStatus(%d)", i)
	}
	return _UserStatusName[_UserStatusIndex[i]:_UserStatusIndex[i+1]]
}

// An "invalid array index" compiler error signifies that the constant values have changed.
// Re-run the stringer command to generate them again.
func _UserStatusNoOp() {
	var x [1]struct{}
	_ = x[UserStatusUnverified-(0)]
	_ = x[UserStatusEnable-(1)]
	_ = x[UserStatusDisable-(2)]
	_ = x[UserStatusFrozen-(3)]
}

var _UserStatusValues = []UserStatus{UserStatusUnverified, UserStatusEnable, UserStatusDisable, UserStatusFrozen}

var _UserStatusNameToValueMap = map[string]UserStatus{
	_UserStatusName[0:10]:       UserStatusUnverified,
	_UserStatusLowerName[0:10]:  UserStatusUnverified,
	_UserStatusName[10:16]:      UserStatusEnable,
	_UserStatusLowerName[10:16]: UserStatusEnable,
	_UserStatusName[16:23]:      UserStatusDisable,
	_UserStatusLowerName[16:23]: UserStatusDisable,
	_UserStatusName[23:29]:      UserStatusFrozen,
	_UserStatusLowerName[23:29]: UserStatusFrozen,
}

var _UserStatusNames = []string{
	_UserStatusName[0:10],
	_UserStatusName[10:16],
	_UserStatusName[16:23],
	_UserStatusName[23:29],
}

// UserStatusString retrieves an enum value from the enum constants string name.
// Throws an error if the param is not part of the enum.
func UserStatusString(s string) (UserStatus, error) {
	if val, ok := _UserStatusNameToValueMap[s]; ok {
		return val, nil
	}

	if val, ok := _UserStatusNameToValueMap[strings.ToLower(s)]; ok {
		return val, nil
	}
	return 0, fmt.Errorf("%s does not belong to UserStatus values", s)
}

// UserStatusValues returns all values of the enum
func UserStatusValues() []UserStatus {
	return _UserStatusValues
}

// UserStatusStrings returns a slice of all String values of the enum
func UserStatusStrings() []string {
	strs := make([]string, len(_UserStatusNames))
	copy(strs, _UserStatusNames)
	return strs
}

// IsAUserStatus returns "true" if the value is listed in the enum definition. "false" otherwise
func (i UserStatus) IsAUserStatus() bool {
	for _, v := range _UserStatusValues {
		if i == v {
			return true
		}
	}
	return false
}

// MarshalJSON implements the json.Marshaler interface for UserStatus
func (i UserStatus) MarshalJSON() ([]byte, error) {
	return json.Marshal(i.String())
}

// UnmarshalJSON implements the json.Unmarshaler interface for UserStatus
func (i *UserStatus) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return fmt.Errorf("UserStatus should be a string, got %s", data)
	}

	var err error
	*i, err = UserStatusString(s)
	return err
}

// MarshalText implements the encoding.TextMarshaler interface for UserStatus
func (i UserStatus) MarshalText() ([]byte, error) {
	return []byte(i.String()), nil
}

// UnmarshalText implements the encoding.TextUnmarshaler interface for UserStatus
func (i *UserStatus) UnmarshalText(text []byte) error {
	var err error
	*i, err = UserStatusString(string(text))
	return err
}

// MarshalYAML implements a YAML Marshaler for UserStatus
func (i UserStatus) MarshalYAML() (interface{}, error) {
	return i.String(), nil
}

// UnmarshalYAML implements a YAML Unmarshaler for UserStatus
func (i *UserStatus) UnmarshalYAML(unmarshal func(interface{}) error) error {
	var s string
	if err := unmarshal(&s); err != nil {
		return err
	}

	var err error
	*i, err = UserStatusString(s)
	return err
}

func (i UserStatus) Value() (driver.Value, error) {
	return i.String(), nil
}

func (i *UserStatus) Scan(value interface{}) error {
	if value == nil {
		return nil
	}

	var str string
	switch v := value.(type) {
	case []byte:
		str = string(v)
	case string:
		str = v
	case fmt.Stringer:
		str = v.String()
	default:
		return fmt.Errorf("invalid value of UserStatus: %[1]T(%[1]v)", value)
	}

	val, err := UserStatusString(str)
	if err != nil {
		return err
	}

	*i = val
	return nil
}
