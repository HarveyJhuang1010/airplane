// Code generated by "enumer -type=JournalManagerProto -trimprefix=JournalManagerProto -yaml -json -text -transform=snake --output=zzz_enumer_journalManagerProto.go"; DO NOT EDIT.

package enum

import (
	"encoding/json"
	"fmt"
	"strings"
)

const _JournalManagerProtoName = "unknownhttpsftp"

var _JournalManagerProtoIndex = [...]uint8{0, 7, 11, 15}

const _JournalManagerProtoLowerName = "unknownhttpsftp"

func (i JournalManagerProto) String() string {
	if i < 0 || i >= JournalManagerProto(len(_JournalManagerProtoIndex)-1) {
		return fmt.Sprintf("JournalManagerProto(%d)", i)
	}
	return _JournalManagerProtoName[_JournalManagerProtoIndex[i]:_JournalManagerProtoIndex[i+1]]
}

// An "invalid array index" compiler error signifies that the constant values have changed.
// Re-run the stringer command to generate them again.
func _JournalManagerProtoNoOp() {
	var x [1]struct{}
	_ = x[JournalManagerProtoUnknown-(0)]
	_ = x[JournalManagerProtoHttp-(1)]
	_ = x[JournalManagerProtoSftp-(2)]
}

var _JournalManagerProtoValues = []JournalManagerProto{JournalManagerProtoUnknown, JournalManagerProtoHttp, JournalManagerProtoSftp}

var _JournalManagerProtoNameToValueMap = map[string]JournalManagerProto{
	_JournalManagerProtoName[0:7]:        JournalManagerProtoUnknown,
	_JournalManagerProtoLowerName[0:7]:   JournalManagerProtoUnknown,
	_JournalManagerProtoName[7:11]:       JournalManagerProtoHttp,
	_JournalManagerProtoLowerName[7:11]:  JournalManagerProtoHttp,
	_JournalManagerProtoName[11:15]:      JournalManagerProtoSftp,
	_JournalManagerProtoLowerName[11:15]: JournalManagerProtoSftp,
}

var _JournalManagerProtoNames = []string{
	_JournalManagerProtoName[0:7],
	_JournalManagerProtoName[7:11],
	_JournalManagerProtoName[11:15],
}

// JournalManagerProtoString retrieves an enum value from the enum constants string name.
// Throws an error if the param is not part of the enum.
func JournalManagerProtoString(s string) (JournalManagerProto, error) {
	if val, ok := _JournalManagerProtoNameToValueMap[s]; ok {
		return val, nil
	}

	if val, ok := _JournalManagerProtoNameToValueMap[strings.ToLower(s)]; ok {
		return val, nil
	}
	return 0, fmt.Errorf("%s does not belong to JournalManagerProto values", s)
}

// JournalManagerProtoValues returns all values of the enum
func JournalManagerProtoValues() []JournalManagerProto {
	return _JournalManagerProtoValues
}

// JournalManagerProtoStrings returns a slice of all String values of the enum
func JournalManagerProtoStrings() []string {
	strs := make([]string, len(_JournalManagerProtoNames))
	copy(strs, _JournalManagerProtoNames)
	return strs
}

// IsAJournalManagerProto returns "true" if the value is listed in the enum definition. "false" otherwise
func (i JournalManagerProto) IsAJournalManagerProto() bool {
	for _, v := range _JournalManagerProtoValues {
		if i == v {
			return true
		}
	}
	return false
}

// MarshalJSON implements the json.Marshaler interface for JournalManagerProto
func (i JournalManagerProto) MarshalJSON() ([]byte, error) {
	return json.Marshal(i.String())
}

// UnmarshalJSON implements the json.Unmarshaler interface for JournalManagerProto
func (i *JournalManagerProto) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return fmt.Errorf("JournalManagerProto should be a string, got %s", data)
	}

	var err error
	*i, err = JournalManagerProtoString(s)
	return err
}

// MarshalText implements the encoding.TextMarshaler interface for JournalManagerProto
func (i JournalManagerProto) MarshalText() ([]byte, error) {
	return []byte(i.String()), nil
}

// UnmarshalText implements the encoding.TextUnmarshaler interface for JournalManagerProto
func (i *JournalManagerProto) UnmarshalText(text []byte) error {
	var err error
	*i, err = JournalManagerProtoString(string(text))
	return err
}

// MarshalYAML implements a YAML Marshaler for JournalManagerProto
func (i JournalManagerProto) MarshalYAML() (interface{}, error) {
	return i.String(), nil
}

// UnmarshalYAML implements a YAML Unmarshaler for JournalManagerProto
func (i *JournalManagerProto) UnmarshalYAML(unmarshal func(interface{}) error) error {
	var s string
	if err := unmarshal(&s); err != nil {
		return err
	}

	var err error
	*i, err = JournalManagerProtoString(s)
	return err
}
