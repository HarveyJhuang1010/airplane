// Code generated by "enumer -type=JournalManagerStatus -trimprefix=JournalManagerStatus -yaml -json -text -transform=snake --output=zzz_enumer_journalManagerStatus.go"; DO NOT EDIT.

package enum

import (
	"encoding/json"
	"fmt"
	"strings"
)

const _JournalManagerStatusName = "failedsuccess"

var _JournalManagerStatusIndex = [...]uint8{0, 6, 13}

const _JournalManagerStatusLowerName = "failedsuccess"

func (i JournalManagerStatus) String() string {
	if i < 0 || i >= JournalManagerStatus(len(_JournalManagerStatusIndex)-1) {
		return fmt.Sprintf("JournalManagerStatus(%d)", i)
	}
	return _JournalManagerStatusName[_JournalManagerStatusIndex[i]:_JournalManagerStatusIndex[i+1]]
}

// An "invalid array index" compiler error signifies that the constant values have changed.
// Re-run the stringer command to generate them again.
func _JournalManagerStatusNoOp() {
	var x [1]struct{}
	_ = x[JournalManagerStatusFailed-(0)]
	_ = x[JournalManagerStatusSuccess-(1)]
}

var _JournalManagerStatusValues = []JournalManagerStatus{JournalManagerStatusFailed, JournalManagerStatusSuccess}

var _JournalManagerStatusNameToValueMap = map[string]JournalManagerStatus{
	_JournalManagerStatusName[0:6]:       JournalManagerStatusFailed,
	_JournalManagerStatusLowerName[0:6]:  JournalManagerStatusFailed,
	_JournalManagerStatusName[6:13]:      JournalManagerStatusSuccess,
	_JournalManagerStatusLowerName[6:13]: JournalManagerStatusSuccess,
}

var _JournalManagerStatusNames = []string{
	_JournalManagerStatusName[0:6],
	_JournalManagerStatusName[6:13],
}

// JournalManagerStatusString retrieves an enum value from the enum constants string name.
// Throws an error if the param is not part of the enum.
func JournalManagerStatusString(s string) (JournalManagerStatus, error) {
	if val, ok := _JournalManagerStatusNameToValueMap[s]; ok {
		return val, nil
	}

	if val, ok := _JournalManagerStatusNameToValueMap[strings.ToLower(s)]; ok {
		return val, nil
	}
	return 0, fmt.Errorf("%s does not belong to JournalManagerStatus values", s)
}

// JournalManagerStatusValues returns all values of the enum
func JournalManagerStatusValues() []JournalManagerStatus {
	return _JournalManagerStatusValues
}

// JournalManagerStatusStrings returns a slice of all String values of the enum
func JournalManagerStatusStrings() []string {
	strs := make([]string, len(_JournalManagerStatusNames))
	copy(strs, _JournalManagerStatusNames)
	return strs
}

// IsAJournalManagerStatus returns "true" if the value is listed in the enum definition. "false" otherwise
func (i JournalManagerStatus) IsAJournalManagerStatus() bool {
	for _, v := range _JournalManagerStatusValues {
		if i == v {
			return true
		}
	}
	return false
}

// MarshalJSON implements the json.Marshaler interface for JournalManagerStatus
func (i JournalManagerStatus) MarshalJSON() ([]byte, error) {
	return json.Marshal(i.String())
}

// UnmarshalJSON implements the json.Unmarshaler interface for JournalManagerStatus
func (i *JournalManagerStatus) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return fmt.Errorf("JournalManagerStatus should be a string, got %s", data)
	}

	var err error
	*i, err = JournalManagerStatusString(s)
	return err
}

// MarshalText implements the encoding.TextMarshaler interface for JournalManagerStatus
func (i JournalManagerStatus) MarshalText() ([]byte, error) {
	return []byte(i.String()), nil
}

// UnmarshalText implements the encoding.TextUnmarshaler interface for JournalManagerStatus
func (i *JournalManagerStatus) UnmarshalText(text []byte) error {
	var err error
	*i, err = JournalManagerStatusString(string(text))
	return err
}

// MarshalYAML implements a YAML Marshaler for JournalManagerStatus
func (i JournalManagerStatus) MarshalYAML() (interface{}, error) {
	return i.String(), nil
}

// UnmarshalYAML implements a YAML Unmarshaler for JournalManagerStatus
func (i *JournalManagerStatus) UnmarshalYAML(unmarshal func(interface{}) error) error {
	var s string
	if err := unmarshal(&s); err != nil {
		return err
	}

	var err error
	*i, err = JournalManagerStatusString(s)
	return err
}
