// Code generated by "enumer -type=MfaType -trimprefix=MfaType -yaml -json -text -transform=snake --output=zzz_enumer_mfaType.go"; DO NOT EDIT.

package enum

import (
	"encoding/json"
	"fmt"
	"strings"
)

const (
	_MfaTypeName_0      = "emailsms"
	_MfaTypeLowerName_0 = "emailsms"
	_MfaTypeName_1      = "google_authenticator"
	_MfaTypeLowerName_1 = "google_authenticator"
)

var (
	_MfaTypeIndex_0 = [...]uint8{0, 5, 8}
	_MfaTypeIndex_1 = [...]uint8{0, 20}
)

func (i MfaType) String() string {
	switch {
	case 1 <= i && i <= 2:
		i -= 1
		return _MfaTypeName_0[_MfaTypeIndex_0[i]:_MfaTypeIndex_0[i+1]]
	case i == 4:
		return _MfaTypeName_1
	default:
		return fmt.Sprintf("MfaType(%d)", i)
	}
}

// An "invalid array index" compiler error signifies that the constant values have changed.
// Re-run the stringer command to generate them again.
func _MfaTypeNoOp() {
	var x [1]struct{}
	_ = x[MfaTypeEmail-(1)]
	_ = x[MfaTypeSms-(2)]
	_ = x[MfaTypeGoogleAuthenticator-(4)]
}

var _MfaTypeValues = []MfaType{MfaTypeEmail, MfaTypeSms, MfaTypeGoogleAuthenticator}

var _MfaTypeNameToValueMap = map[string]MfaType{
	_MfaTypeName_0[0:5]:       MfaTypeEmail,
	_MfaTypeLowerName_0[0:5]:  MfaTypeEmail,
	_MfaTypeName_0[5:8]:       MfaTypeSms,
	_MfaTypeLowerName_0[5:8]:  MfaTypeSms,
	_MfaTypeName_1[0:20]:      MfaTypeGoogleAuthenticator,
	_MfaTypeLowerName_1[0:20]: MfaTypeGoogleAuthenticator,
}

var _MfaTypeNames = []string{
	_MfaTypeName_0[0:5],
	_MfaTypeName_0[5:8],
	_MfaTypeName_1[0:20],
}

// MfaTypeString retrieves an enum value from the enum constants string name.
// Throws an error if the param is not part of the enum.
func MfaTypeString(s string) (MfaType, error) {
	if val, ok := _MfaTypeNameToValueMap[s]; ok {
		return val, nil
	}

	if val, ok := _MfaTypeNameToValueMap[strings.ToLower(s)]; ok {
		return val, nil
	}
	return 0, fmt.Errorf("%s does not belong to MfaType values", s)
}

// MfaTypeValues returns all values of the enum
func MfaTypeValues() []MfaType {
	return _MfaTypeValues
}

// MfaTypeStrings returns a slice of all String values of the enum
func MfaTypeStrings() []string {
	strs := make([]string, len(_MfaTypeNames))
	copy(strs, _MfaTypeNames)
	return strs
}

// IsAMfaType returns "true" if the value is listed in the enum definition. "false" otherwise
func (i MfaType) IsAMfaType() bool {
	for _, v := range _MfaTypeValues {
		if i == v {
			return true
		}
	}
	return false
}

// MarshalJSON implements the json.Marshaler interface for MfaType
func (i MfaType) MarshalJSON() ([]byte, error) {
	return json.Marshal(i.String())
}

// UnmarshalJSON implements the json.Unmarshaler interface for MfaType
func (i *MfaType) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return fmt.Errorf("MfaType should be a string, got %s", data)
	}

	var err error
	*i, err = MfaTypeString(s)
	return err
}

// MarshalText implements the encoding.TextMarshaler interface for MfaType
func (i MfaType) MarshalText() ([]byte, error) {
	return []byte(i.String()), nil
}

// UnmarshalText implements the encoding.TextUnmarshaler interface for MfaType
func (i *MfaType) UnmarshalText(text []byte) error {
	var err error
	*i, err = MfaTypeString(string(text))
	return err
}

// MarshalYAML implements a YAML Marshaler for MfaType
func (i MfaType) MarshalYAML() (interface{}, error) {
	return i.String(), nil
}

// UnmarshalYAML implements a YAML Unmarshaler for MfaType
func (i *MfaType) UnmarshalYAML(unmarshal func(interface{}) error) error {
	var s string
	if err := unmarshal(&s); err != nil {
		return err
	}

	var err error
	*i, err = MfaTypeString(s)
	return err
}
