// Code generated by "enumer -type=PaymentStatus -trimprefix=PaymentStatus -yaml -json -text -sql -transform=snake --output=zzz_enumer_PaymentStatus.go"; DO NOT EDIT.

package enum

import (
	"database/sql/driver"
	"encoding/json"
	"fmt"
	"strings"
)

const _PaymentStatusName = "pendingsuccessfailedcancelled"

var _PaymentStatusIndex = [...]uint8{0, 7, 14, 20, 29}

const _PaymentStatusLowerName = "pendingsuccessfailedcancelled"

func (i PaymentStatus) String() string {
	if i < 0 || i >= PaymentStatus(len(_PaymentStatusIndex)-1) {
		return fmt.Sprintf("PaymentStatus(%d)", i)
	}
	return _PaymentStatusName[_PaymentStatusIndex[i]:_PaymentStatusIndex[i+1]]
}

// An "invalid array index" compiler error signifies that the constant values have changed.
// Re-run the stringer command to generate them again.
func _PaymentStatusNoOp() {
	var x [1]struct{}
	_ = x[PaymentStatusPending-(0)]
	_ = x[PaymentStatusSuccess-(1)]
	_ = x[PaymentStatusFailed-(2)]
	_ = x[PaymentStatusCancelled-(3)]
}

var _PaymentStatusValues = []PaymentStatus{PaymentStatusPending, PaymentStatusSuccess, PaymentStatusFailed, PaymentStatusCancelled}

var _PaymentStatusNameToValueMap = map[string]PaymentStatus{
	_PaymentStatusName[0:7]:        PaymentStatusPending,
	_PaymentStatusLowerName[0:7]:   PaymentStatusPending,
	_PaymentStatusName[7:14]:       PaymentStatusSuccess,
	_PaymentStatusLowerName[7:14]:  PaymentStatusSuccess,
	_PaymentStatusName[14:20]:      PaymentStatusFailed,
	_PaymentStatusLowerName[14:20]: PaymentStatusFailed,
	_PaymentStatusName[20:29]:      PaymentStatusCancelled,
	_PaymentStatusLowerName[20:29]: PaymentStatusCancelled,
}

var _PaymentStatusNames = []string{
	_PaymentStatusName[0:7],
	_PaymentStatusName[7:14],
	_PaymentStatusName[14:20],
	_PaymentStatusName[20:29],
}

// PaymentStatusString retrieves an enum value from the enum constants string name.
// Throws an error if the param is not part of the enum.
func PaymentStatusString(s string) (PaymentStatus, error) {
	if val, ok := _PaymentStatusNameToValueMap[s]; ok {
		return val, nil
	}

	if val, ok := _PaymentStatusNameToValueMap[strings.ToLower(s)]; ok {
		return val, nil
	}
	return 0, fmt.Errorf("%s does not belong to PaymentStatus values", s)
}

// PaymentStatusValues returns all values of the enum
func PaymentStatusValues() []PaymentStatus {
	return _PaymentStatusValues
}

// PaymentStatusStrings returns a slice of all String values of the enum
func PaymentStatusStrings() []string {
	strs := make([]string, len(_PaymentStatusNames))
	copy(strs, _PaymentStatusNames)
	return strs
}

// IsAPaymentStatus returns "true" if the value is listed in the enum definition. "false" otherwise
func (i PaymentStatus) IsAPaymentStatus() bool {
	for _, v := range _PaymentStatusValues {
		if i == v {
			return true
		}
	}
	return false
}

// MarshalJSON implements the json.Marshaler interface for PaymentStatus
func (i PaymentStatus) MarshalJSON() ([]byte, error) {
	return json.Marshal(i.String())
}

// UnmarshalJSON implements the json.Unmarshaler interface for PaymentStatus
func (i *PaymentStatus) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return fmt.Errorf("PaymentStatus should be a string, got %s", data)
	}

	var err error
	*i, err = PaymentStatusString(s)
	return err
}

// MarshalText implements the encoding.TextMarshaler interface for PaymentStatus
func (i PaymentStatus) MarshalText() ([]byte, error) {
	return []byte(i.String()), nil
}

// UnmarshalText implements the encoding.TextUnmarshaler interface for PaymentStatus
func (i *PaymentStatus) UnmarshalText(text []byte) error {
	var err error
	*i, err = PaymentStatusString(string(text))
	return err
}

// MarshalYAML implements a YAML Marshaler for PaymentStatus
func (i PaymentStatus) MarshalYAML() (interface{}, error) {
	return i.String(), nil
}

// UnmarshalYAML implements a YAML Unmarshaler for PaymentStatus
func (i *PaymentStatus) UnmarshalYAML(unmarshal func(interface{}) error) error {
	var s string
	if err := unmarshal(&s); err != nil {
		return err
	}

	var err error
	*i, err = PaymentStatusString(s)
	return err
}

func (i PaymentStatus) Value() (driver.Value, error) {
	return i.String(), nil
}

func (i *PaymentStatus) Scan(value interface{}) error {
	if value == nil {
		return nil
	}

	var str string
	switch v := value.(type) {
	case []byte:
		str = string(v)
	case string:
		str = v
	case fmt.Stringer:
		str = v.String()
	default:
		return fmt.Errorf("invalid value of PaymentStatus: %[1]T(%[1]v)", value)
	}

	val, err := PaymentStatusString(str)
	if err != nil {
		return err
	}

	*i = val
	return nil
}
