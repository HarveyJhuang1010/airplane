// Code generated by "enumer -type=PostmanContactType -trimprefix=PostmanContactType -yaml -json -text -transform=snake --output=zzz_enumer_postmanContactType.go"; DO NOT EDIT.

package enum

import (
	"encoding/json"
	"fmt"
	"strings"
)

const _PostmanContactTypeName = "unknownemailphone"

var _PostmanContactTypeIndex = [...]uint8{0, 7, 12, 17}

const _PostmanContactTypeLowerName = "unknownemailphone"

func (i PostmanContactType) String() string {
	if i < 0 || i >= PostmanContactType(len(_PostmanContactTypeIndex)-1) {
		return fmt.Sprintf("PostmanContactType(%d)", i)
	}
	return _PostmanContactTypeName[_PostmanContactTypeIndex[i]:_PostmanContactTypeIndex[i+1]]
}

// An "invalid array index" compiler error signifies that the constant values have changed.
// Re-run the stringer command to generate them again.
func _PostmanContactTypeNoOp() {
	var x [1]struct{}
	_ = x[PostmanContactTypeUnknown-(0)]
	_ = x[PostmanContactTypeEmail-(1)]
	_ = x[PostmanContactTypePhone-(2)]
}

var _PostmanContactTypeValues = []PostmanContactType{PostmanContactTypeUnknown, PostmanContactTypeEmail, PostmanContactTypePhone}

var _PostmanContactTypeNameToValueMap = map[string]PostmanContactType{
	_PostmanContactTypeName[0:7]:        PostmanContactTypeUnknown,
	_PostmanContactTypeLowerName[0:7]:   PostmanContactTypeUnknown,
	_PostmanContactTypeName[7:12]:       PostmanContactTypeEmail,
	_PostmanContactTypeLowerName[7:12]:  PostmanContactTypeEmail,
	_PostmanContactTypeName[12:17]:      PostmanContactTypePhone,
	_PostmanContactTypeLowerName[12:17]: PostmanContactTypePhone,
}

var _PostmanContactTypeNames = []string{
	_PostmanContactTypeName[0:7],
	_PostmanContactTypeName[7:12],
	_PostmanContactTypeName[12:17],
}

// PostmanContactTypeString retrieves an enum value from the enum constants string name.
// Throws an error if the param is not part of the enum.
func PostmanContactTypeString(s string) (PostmanContactType, error) {
	if val, ok := _PostmanContactTypeNameToValueMap[s]; ok {
		return val, nil
	}

	if val, ok := _PostmanContactTypeNameToValueMap[strings.ToLower(s)]; ok {
		return val, nil
	}
	return 0, fmt.Errorf("%s does not belong to PostmanContactType values", s)
}

// PostmanContactTypeValues returns all values of the enum
func PostmanContactTypeValues() []PostmanContactType {
	return _PostmanContactTypeValues
}

// PostmanContactTypeStrings returns a slice of all String values of the enum
func PostmanContactTypeStrings() []string {
	strs := make([]string, len(_PostmanContactTypeNames))
	copy(strs, _PostmanContactTypeNames)
	return strs
}

// IsAPostmanContactType returns "true" if the value is listed in the enum definition. "false" otherwise
func (i PostmanContactType) IsAPostmanContactType() bool {
	for _, v := range _PostmanContactTypeValues {
		if i == v {
			return true
		}
	}
	return false
}

// MarshalJSON implements the json.Marshaler interface for PostmanContactType
func (i PostmanContactType) MarshalJSON() ([]byte, error) {
	return json.Marshal(i.String())
}

// UnmarshalJSON implements the json.Unmarshaler interface for PostmanContactType
func (i *PostmanContactType) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return fmt.Errorf("PostmanContactType should be a string, got %s", data)
	}

	var err error
	*i, err = PostmanContactTypeString(s)
	return err
}

// MarshalText implements the encoding.TextMarshaler interface for PostmanContactType
func (i PostmanContactType) MarshalText() ([]byte, error) {
	return []byte(i.String()), nil
}

// UnmarshalText implements the encoding.TextUnmarshaler interface for PostmanContactType
func (i *PostmanContactType) UnmarshalText(text []byte) error {
	var err error
	*i, err = PostmanContactTypeString(string(text))
	return err
}

// MarshalYAML implements a YAML Marshaler for PostmanContactType
func (i PostmanContactType) MarshalYAML() (interface{}, error) {
	return i.String(), nil
}

// UnmarshalYAML implements a YAML Unmarshaler for PostmanContactType
func (i *PostmanContactType) UnmarshalYAML(unmarshal func(interface{}) error) error {
	var s string
	if err := unmarshal(&s); err != nil {
		return err
	}

	var err error
	*i, err = PostmanContactTypeString(s)
	return err
}
