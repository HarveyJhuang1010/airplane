// Code generated by "enumer -type=TrailOperatorType -trimprefix=TrailOperatorType -yaml -json -text -transform=snake --output=zzz_enumer_trailOperatorType.go"; DO NOT EDIT.

package enum

import (
	"encoding/json"
	"fmt"
	"strings"
)

const _TrailOperatorTypeName = "unknownsystem"

var _TrailOperatorTypeIndex = [...]uint8{0, 7, 13}

const _TrailOperatorTypeLowerName = "unknownsystem"

func (i TrailOperatorType) String() string {
	if i < 0 || i >= TrailOperatorType(len(_TrailOperatorTypeIndex)-1) {
		return fmt.Sprintf("TrailOperatorType(%d)", i)
	}
	return _TrailOperatorTypeName[_TrailOperatorTypeIndex[i]:_TrailOperatorTypeIndex[i+1]]
}

// An "invalid array index" compiler error signifies that the constant values have changed.
// Re-run the stringer command to generate them again.
func _TrailOperatorTypeNoOp() {
	var x [1]struct{}
	_ = x[TrailOperatorTypeUnknown-(0)]
	_ = x[TrailOperatorTypeSystem-(1)]
}

var _TrailOperatorTypeValues = []TrailOperatorType{TrailOperatorTypeUnknown, TrailOperatorTypeSystem}

var _TrailOperatorTypeNameToValueMap = map[string]TrailOperatorType{
	_TrailOperatorTypeName[0:7]:       TrailOperatorTypeUnknown,
	_TrailOperatorTypeLowerName[0:7]:  TrailOperatorTypeUnknown,
	_TrailOperatorTypeName[7:13]:      TrailOperatorTypeSystem,
	_TrailOperatorTypeLowerName[7:13]: TrailOperatorTypeSystem,
}

var _TrailOperatorTypeNames = []string{
	_TrailOperatorTypeName[0:7],
	_TrailOperatorTypeName[7:13],
}

// TrailOperatorTypeString retrieves an enum value from the enum constants string name.
// Throws an error if the param is not part of the enum.
func TrailOperatorTypeString(s string) (TrailOperatorType, error) {
	if val, ok := _TrailOperatorTypeNameToValueMap[s]; ok {
		return val, nil
	}

	if val, ok := _TrailOperatorTypeNameToValueMap[strings.ToLower(s)]; ok {
		return val, nil
	}
	return 0, fmt.Errorf("%s does not belong to TrailOperatorType values", s)
}

// TrailOperatorTypeValues returns all values of the enum
func TrailOperatorTypeValues() []TrailOperatorType {
	return _TrailOperatorTypeValues
}

// TrailOperatorTypeStrings returns a slice of all String values of the enum
func TrailOperatorTypeStrings() []string {
	strs := make([]string, len(_TrailOperatorTypeNames))
	copy(strs, _TrailOperatorTypeNames)
	return strs
}

// IsATrailOperatorType returns "true" if the value is listed in the enum definition. "false" otherwise
func (i TrailOperatorType) IsATrailOperatorType() bool {
	for _, v := range _TrailOperatorTypeValues {
		if i == v {
			return true
		}
	}
	return false
}

// MarshalJSON implements the json.Marshaler interface for TrailOperatorType
func (i TrailOperatorType) MarshalJSON() ([]byte, error) {
	return json.Marshal(i.String())
}

// UnmarshalJSON implements the json.Unmarshaler interface for TrailOperatorType
func (i *TrailOperatorType) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return fmt.Errorf("TrailOperatorType should be a string, got %s", data)
	}

	var err error
	*i, err = TrailOperatorTypeString(s)
	return err
}

// MarshalText implements the encoding.TextMarshaler interface for TrailOperatorType
func (i TrailOperatorType) MarshalText() ([]byte, error) {
	return []byte(i.String()), nil
}

// UnmarshalText implements the encoding.TextUnmarshaler interface for TrailOperatorType
func (i *TrailOperatorType) UnmarshalText(text []byte) error {
	var err error
	*i, err = TrailOperatorTypeString(string(text))
	return err
}

// MarshalYAML implements a YAML Marshaler for TrailOperatorType
func (i TrailOperatorType) MarshalYAML() (interface{}, error) {
	return i.String(), nil
}

// UnmarshalYAML implements a YAML Unmarshaler for TrailOperatorType
func (i *TrailOperatorType) UnmarshalYAML(unmarshal func(interface{}) error) error {
	var s string
	if err := unmarshal(&s); err != nil {
		return err
	}

	var err error
	*i, err = TrailOperatorTypeString(s)
	return err
}
