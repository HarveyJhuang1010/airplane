// Code generated by "enumer -type=SlackRiskLevel -trimprefix=SlackRiskLevel -yaml -json -text -transform=snake --output=zzz_enumer_slackRiskLevel.go"; DO NOT EDIT.

package enum

import (
	"encoding/json"
	"fmt"
	"strings"
)

const _SlackRiskLevelName = "unknownlowmediumhigh"

var _SlackRiskLevelIndex = [...]uint8{0, 7, 10, 16, 20}

const _SlackRiskLevelLowerName = "unknownlowmediumhigh"

func (i SlackRiskLevel) String() string {
	if i < 0 || i >= SlackRiskLevel(len(_SlackRiskLevelIndex)-1) {
		return fmt.Sprintf("SlackRiskLevel(%d)", i)
	}
	return _SlackRiskLevelName[_SlackRiskLevelIndex[i]:_SlackRiskLevelIndex[i+1]]
}

// An "invalid array index" compiler error signifies that the constant values have changed.
// Re-run the stringer command to generate them again.
func _SlackRiskLevelNoOp() {
	var x [1]struct{}
	_ = x[SlackRiskLevelUnknown-(0)]
	_ = x[SlackRiskLevelLow-(1)]
	_ = x[SlackRiskLevelMedium-(2)]
	_ = x[SlackRiskLevelHigh-(3)]
}

var _SlackRiskLevelValues = []SlackRiskLevel{SlackRiskLevelUnknown, SlackRiskLevelLow, SlackRiskLevelMedium, SlackRiskLevelHigh}

var _SlackRiskLevelNameToValueMap = map[string]SlackRiskLevel{
	_SlackRiskLevelName[0:7]:        SlackRiskLevelUnknown,
	_SlackRiskLevelLowerName[0:7]:   SlackRiskLevelUnknown,
	_SlackRiskLevelName[7:10]:       SlackRiskLevelLow,
	_SlackRiskLevelLowerName[7:10]:  SlackRiskLevelLow,
	_SlackRiskLevelName[10:16]:      SlackRiskLevelMedium,
	_SlackRiskLevelLowerName[10:16]: SlackRiskLevelMedium,
	_SlackRiskLevelName[16:20]:      SlackRiskLevelHigh,
	_SlackRiskLevelLowerName[16:20]: SlackRiskLevelHigh,
}

var _SlackRiskLevelNames = []string{
	_SlackRiskLevelName[0:7],
	_SlackRiskLevelName[7:10],
	_SlackRiskLevelName[10:16],
	_SlackRiskLevelName[16:20],
}

// SlackRiskLevelString retrieves an enum value from the enum constants string name.
// Throws an error if the param is not part of the enum.
func SlackRiskLevelString(s string) (SlackRiskLevel, error) {
	if val, ok := _SlackRiskLevelNameToValueMap[s]; ok {
		return val, nil
	}

	if val, ok := _SlackRiskLevelNameToValueMap[strings.ToLower(s)]; ok {
		return val, nil
	}
	return 0, fmt.Errorf("%s does not belong to SlackRiskLevel values", s)
}

// SlackRiskLevelValues returns all values of the enum
func SlackRiskLevelValues() []SlackRiskLevel {
	return _SlackRiskLevelValues
}

// SlackRiskLevelStrings returns a slice of all String values of the enum
func SlackRiskLevelStrings() []string {
	strs := make([]string, len(_SlackRiskLevelNames))
	copy(strs, _SlackRiskLevelNames)
	return strs
}

// IsASlackRiskLevel returns "true" if the value is listed in the enum definition. "false" otherwise
func (i SlackRiskLevel) IsASlackRiskLevel() bool {
	for _, v := range _SlackRiskLevelValues {
		if i == v {
			return true
		}
	}
	return false
}

// MarshalJSON implements the json.Marshaler interface for SlackRiskLevel
func (i SlackRiskLevel) MarshalJSON() ([]byte, error) {
	return json.Marshal(i.String())
}

// UnmarshalJSON implements the json.Unmarshaler interface for SlackRiskLevel
func (i *SlackRiskLevel) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return fmt.Errorf("SlackRiskLevel should be a string, got %s", data)
	}

	var err error
	*i, err = SlackRiskLevelString(s)
	return err
}

// MarshalText implements the encoding.TextMarshaler interface for SlackRiskLevel
func (i SlackRiskLevel) MarshalText() ([]byte, error) {
	return []byte(i.String()), nil
}

// UnmarshalText implements the encoding.TextUnmarshaler interface for SlackRiskLevel
func (i *SlackRiskLevel) UnmarshalText(text []byte) error {
	var err error
	*i, err = SlackRiskLevelString(string(text))
	return err
}

// MarshalYAML implements a YAML Marshaler for SlackRiskLevel
func (i SlackRiskLevel) MarshalYAML() (interface{}, error) {
	return i.String(), nil
}

// UnmarshalYAML implements a YAML Unmarshaler for SlackRiskLevel
func (i *SlackRiskLevel) UnmarshalYAML(unmarshal func(interface{}) error) error {
	var s string
	if err := unmarshal(&s); err != nil {
		return err
	}

	var err error
	*i, err = SlackRiskLevelString(s)
	return err
}
