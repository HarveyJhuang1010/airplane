// Code generated by "enumer -type=IdentityType -trimprefix=IdentityType -yaml -json -text -transform=snake --output=zzz_enumer_identityType.go"; DO NOT EDIT.

package enum

import (
	"encoding/json"
	"fmt"
	"strings"
)

const _IdentityTypeName = "unknown"

var _IdentityTypeIndex = [...]uint8{0, 7}

const _IdentityTypeLowerName = "unknown"

func (i IdentityType) String() string {
	i -= 1
	if i < 0 || i >= IdentityType(len(_IdentityTypeIndex)-1) {
		return fmt.Sprintf("IdentityType(%d)", i+1)
	}
	return _IdentityTypeName[_IdentityTypeIndex[i]:_IdentityTypeIndex[i+1]]
}

// An "invalid array index" compiler error signifies that the constant values have changed.
// Re-run the stringer command to generate them again.
func _IdentityTypeNoOp() {
	var x [1]struct{}
	_ = x[IdentityTypeUnknown-(1)]
}

var _IdentityTypeValues = []IdentityType{IdentityTypeUnknown}

var _IdentityTypeNameToValueMap = map[string]IdentityType{
	_IdentityTypeName[0:7]:      IdentityTypeUnknown,
	_IdentityTypeLowerName[0:7]: IdentityTypeUnknown,
}

var _IdentityTypeNames = []string{
	_IdentityTypeName[0:7],
}

// IdentityTypeString retrieves an enum value from the enum constants string name.
// Throws an error if the param is not part of the enum.
func IdentityTypeString(s string) (IdentityType, error) {
	if val, ok := _IdentityTypeNameToValueMap[s]; ok {
		return val, nil
	}

	if val, ok := _IdentityTypeNameToValueMap[strings.ToLower(s)]; ok {
		return val, nil
	}
	return 0, fmt.Errorf("%s does not belong to IdentityType values", s)
}

// IdentityTypeValues returns all values of the enum
func IdentityTypeValues() []IdentityType {
	return _IdentityTypeValues
}

// IdentityTypeStrings returns a slice of all String values of the enum
func IdentityTypeStrings() []string {
	strs := make([]string, len(_IdentityTypeNames))
	copy(strs, _IdentityTypeNames)
	return strs
}

// IsAIdentityType returns "true" if the value is listed in the enum definition. "false" otherwise
func (i IdentityType) IsAIdentityType() bool {
	for _, v := range _IdentityTypeValues {
		if i == v {
			return true
		}
	}
	return false
}

// MarshalJSON implements the json.Marshaler interface for IdentityType
func (i IdentityType) MarshalJSON() ([]byte, error) {
	return json.Marshal(i.String())
}

// UnmarshalJSON implements the json.Unmarshaler interface for IdentityType
func (i *IdentityType) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return fmt.Errorf("IdentityType should be a string, got %s", data)
	}

	var err error
	*i, err = IdentityTypeString(s)
	return err
}

// MarshalText implements the encoding.TextMarshaler interface for IdentityType
func (i IdentityType) MarshalText() ([]byte, error) {
	return []byte(i.String()), nil
}

// UnmarshalText implements the encoding.TextUnmarshaler interface for IdentityType
func (i *IdentityType) UnmarshalText(text []byte) error {
	var err error
	*i, err = IdentityTypeString(string(text))
	return err
}

// MarshalYAML implements a YAML Marshaler for IdentityType
func (i IdentityType) MarshalYAML() (interface{}, error) {
	return i.String(), nil
}

// UnmarshalYAML implements a YAML Unmarshaler for IdentityType
func (i *IdentityType) UnmarshalYAML(unmarshal func(interface{}) error) error {
	var s string
	if err := unmarshal(&s); err != nil {
		return err
	}

	var err error
	*i, err = IdentityTypeString(s)
	return err
}
