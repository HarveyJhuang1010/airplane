// Code generated by "enumer -type=PaymentProvider -trimprefix=PaymentProvider -yaml -json -text -sql -transform=snake --output=zzz_enumer_PaymentProvider.go"; DO NOT EDIT.

package enum

import (
	"database/sql/driver"
	"encoding/json"
	"fmt"
	"strings"
)

const _PaymentProviderName = "stripepaypalline_payapple_paygoogle_pay"

var _PaymentProviderIndex = [...]uint8{0, 6, 12, 20, 29, 39}

const _PaymentProviderLowerName = "stripepaypalline_payapple_paygoogle_pay"

func (i PaymentProvider) String() string {
	if i < 0 || i >= PaymentProvider(len(_PaymentProviderIndex)-1) {
		return fmt.Sprintf("PaymentProvider(%d)", i)
	}
	return _PaymentProviderName[_PaymentProviderIndex[i]:_PaymentProviderIndex[i+1]]
}

// An "invalid array index" compiler error signifies that the constant values have changed.
// Re-run the stringer command to generate them again.
func _PaymentProviderNoOp() {
	var x [1]struct{}
	_ = x[PaymentProviderStripe-(0)]
	_ = x[PaymentProviderPaypal-(1)]
	_ = x[PaymentProviderLinePay-(2)]
	_ = x[PaymentProviderApplePay-(3)]
	_ = x[PaymentProviderGooglePay-(4)]
}

var _PaymentProviderValues = []PaymentProvider{PaymentProviderStripe, PaymentProviderPaypal, PaymentProviderLinePay, PaymentProviderApplePay, PaymentProviderGooglePay}

var _PaymentProviderNameToValueMap = map[string]PaymentProvider{
	_PaymentProviderName[0:6]:        PaymentProviderStripe,
	_PaymentProviderLowerName[0:6]:   PaymentProviderStripe,
	_PaymentProviderName[6:12]:       PaymentProviderPaypal,
	_PaymentProviderLowerName[6:12]:  PaymentProviderPaypal,
	_PaymentProviderName[12:20]:      PaymentProviderLinePay,
	_PaymentProviderLowerName[12:20]: PaymentProviderLinePay,
	_PaymentProviderName[20:29]:      PaymentProviderApplePay,
	_PaymentProviderLowerName[20:29]: PaymentProviderApplePay,
	_PaymentProviderName[29:39]:      PaymentProviderGooglePay,
	_PaymentProviderLowerName[29:39]: PaymentProviderGooglePay,
}

var _PaymentProviderNames = []string{
	_PaymentProviderName[0:6],
	_PaymentProviderName[6:12],
	_PaymentProviderName[12:20],
	_PaymentProviderName[20:29],
	_PaymentProviderName[29:39],
}

// PaymentProviderString retrieves an enum value from the enum constants string name.
// Throws an error if the param is not part of the enum.
func PaymentProviderString(s string) (PaymentProvider, error) {
	if val, ok := _PaymentProviderNameToValueMap[s]; ok {
		return val, nil
	}

	if val, ok := _PaymentProviderNameToValueMap[strings.ToLower(s)]; ok {
		return val, nil
	}
	return 0, fmt.Errorf("%s does not belong to PaymentProvider values", s)
}

// PaymentProviderValues returns all values of the enum
func PaymentProviderValues() []PaymentProvider {
	return _PaymentProviderValues
}

// PaymentProviderStrings returns a slice of all String values of the enum
func PaymentProviderStrings() []string {
	strs := make([]string, len(_PaymentProviderNames))
	copy(strs, _PaymentProviderNames)
	return strs
}

// IsAPaymentProvider returns "true" if the value is listed in the enum definition. "false" otherwise
func (i PaymentProvider) IsAPaymentProvider() bool {
	for _, v := range _PaymentProviderValues {
		if i == v {
			return true
		}
	}
	return false
}

// MarshalJSON implements the json.Marshaler interface for PaymentProvider
func (i PaymentProvider) MarshalJSON() ([]byte, error) {
	return json.Marshal(i.String())
}

// UnmarshalJSON implements the json.Unmarshaler interface for PaymentProvider
func (i *PaymentProvider) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return fmt.Errorf("PaymentProvider should be a string, got %s", data)
	}

	var err error
	*i, err = PaymentProviderString(s)
	return err
}

// MarshalText implements the encoding.TextMarshaler interface for PaymentProvider
func (i PaymentProvider) MarshalText() ([]byte, error) {
	return []byte(i.String()), nil
}

// UnmarshalText implements the encoding.TextUnmarshaler interface for PaymentProvider
func (i *PaymentProvider) UnmarshalText(text []byte) error {
	var err error
	*i, err = PaymentProviderString(string(text))
	return err
}

// MarshalYAML implements a YAML Marshaler for PaymentProvider
func (i PaymentProvider) MarshalYAML() (interface{}, error) {
	return i.String(), nil
}

// UnmarshalYAML implements a YAML Unmarshaler for PaymentProvider
func (i *PaymentProvider) UnmarshalYAML(unmarshal func(interface{}) error) error {
	var s string
	if err := unmarshal(&s); err != nil {
		return err
	}

	var err error
	*i, err = PaymentProviderString(s)
	return err
}

func (i PaymentProvider) Value() (driver.Value, error) {
	return i.String(), nil
}

func (i *PaymentProvider) Scan(value interface{}) error {
	if value == nil {
		return nil
	}

	var str string
	switch v := value.(type) {
	case []byte:
		str = string(v)
	case string:
		str = v
	case fmt.Stringer:
		str = v.String()
	default:
		return fmt.Errorf("invalid value of PaymentProvider: %[1]T(%[1]v)", value)
	}

	val, err := PaymentProviderString(str)
	if err != nil {
		return err
	}

	*i = val
	return nil
}
