// Code generated by "enumer -type=DeviceType -trimprefix=DeviceType -yaml -json -text -transform=snake --output=zzz_enumer_deviceType.go"; DO NOT EDIT.

package enum

import (
	"encoding/json"
	"fmt"
	"strings"
)

const _DeviceTypeName = "unknownmobiletabletdesktopbot"

var _DeviceTypeIndex = [...]uint8{0, 7, 13, 19, 26, 29}

const _DeviceTypeLowerName = "unknownmobiletabletdesktopbot"

func (i DeviceType) String() string {
	if i < 0 || i >= DeviceType(len(_DeviceTypeIndex)-1) {
		return fmt.Sprintf("DeviceType(%d)", i)
	}
	return _DeviceTypeName[_DeviceTypeIndex[i]:_DeviceTypeIndex[i+1]]
}

// An "invalid array index" compiler error signifies that the constant values have changed.
// Re-run the stringer command to generate them again.
func _DeviceTypeNoOp() {
	var x [1]struct{}
	_ = x[DeviceTypeUnknown-(0)]
	_ = x[DeviceTypeMobile-(1)]
	_ = x[DeviceTypeTablet-(2)]
	_ = x[DeviceTypeDesktop-(3)]
	_ = x[DeviceTypeBot-(4)]
}

var _DeviceTypeValues = []DeviceType{DeviceTypeUnknown, DeviceTypeMobile, DeviceTypeTablet, DeviceTypeDesktop, DeviceTypeBot}

var _DeviceTypeNameToValueMap = map[string]DeviceType{
	_DeviceTypeName[0:7]:        DeviceTypeUnknown,
	_DeviceTypeLowerName[0:7]:   DeviceTypeUnknown,
	_DeviceTypeName[7:13]:       DeviceTypeMobile,
	_DeviceTypeLowerName[7:13]:  DeviceTypeMobile,
	_DeviceTypeName[13:19]:      DeviceTypeTablet,
	_DeviceTypeLowerName[13:19]: DeviceTypeTablet,
	_DeviceTypeName[19:26]:      DeviceTypeDesktop,
	_DeviceTypeLowerName[19:26]: DeviceTypeDesktop,
	_DeviceTypeName[26:29]:      DeviceTypeBot,
	_DeviceTypeLowerName[26:29]: DeviceTypeBot,
}

var _DeviceTypeNames = []string{
	_DeviceTypeName[0:7],
	_DeviceTypeName[7:13],
	_DeviceTypeName[13:19],
	_DeviceTypeName[19:26],
	_DeviceTypeName[26:29],
}

// DeviceTypeString retrieves an enum value from the enum constants string name.
// Throws an error if the param is not part of the enum.
func DeviceTypeString(s string) (DeviceType, error) {
	if val, ok := _DeviceTypeNameToValueMap[s]; ok {
		return val, nil
	}

	if val, ok := _DeviceTypeNameToValueMap[strings.ToLower(s)]; ok {
		return val, nil
	}
	return 0, fmt.Errorf("%s does not belong to DeviceType values", s)
}

// DeviceTypeValues returns all values of the enum
func DeviceTypeValues() []DeviceType {
	return _DeviceTypeValues
}

// DeviceTypeStrings returns a slice of all String values of the enum
func DeviceTypeStrings() []string {
	strs := make([]string, len(_DeviceTypeNames))
	copy(strs, _DeviceTypeNames)
	return strs
}

// IsADeviceType returns "true" if the value is listed in the enum definition. "false" otherwise
func (i DeviceType) IsADeviceType() bool {
	for _, v := range _DeviceTypeValues {
		if i == v {
			return true
		}
	}
	return false
}

// MarshalJSON implements the json.Marshaler interface for DeviceType
func (i DeviceType) MarshalJSON() ([]byte, error) {
	return json.Marshal(i.String())
}

// UnmarshalJSON implements the json.Unmarshaler interface for DeviceType
func (i *DeviceType) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return fmt.Errorf("DeviceType should be a string, got %s", data)
	}

	var err error
	*i, err = DeviceTypeString(s)
	return err
}

// MarshalText implements the encoding.TextMarshaler interface for DeviceType
func (i DeviceType) MarshalText() ([]byte, error) {
	return []byte(i.String()), nil
}

// UnmarshalText implements the encoding.TextUnmarshaler interface for DeviceType
func (i *DeviceType) UnmarshalText(text []byte) error {
	var err error
	*i, err = DeviceTypeString(string(text))
	return err
}

// MarshalYAML implements a YAML Marshaler for DeviceType
func (i DeviceType) MarshalYAML() (interface{}, error) {
	return i.String(), nil
}

// UnmarshalYAML implements a YAML Unmarshaler for DeviceType
func (i *DeviceType) UnmarshalYAML(unmarshal func(interface{}) error) error {
	var s string
	if err := unmarshal(&s); err != nil {
		return err
	}

	var err error
	*i, err = DeviceTypeString(s)
	return err
}
