// Code generated by "enumer -type=UserLoginType -trimprefix=UserLoginType -yaml -json -text -transform=snake --output=zzz_enumer_userLoginType.go"; DO NOT EDIT.

package enum

import (
	"encoding/json"
	"fmt"
	"strings"
)

const (
	_UserLoginTypeName_0      = "unknownemailphonegooglefacebookappleline"
	_UserLoginTypeLowerName_0 = "unknownemailphonegooglefacebookappleline"
	_UserLoginTypeName_1      = "dealer"
	_UserLoginTypeLowerName_1 = "dealer"
)

var (
	_UserLoginTypeIndex_0 = [...]uint8{0, 7, 12, 17, 23, 31, 36, 40}
	_UserLoginTypeIndex_1 = [...]uint8{0, 6}
)

func (i UserLoginType) String() string {
	switch {
	case 0 <= i && i <= 6:
		return _UserLoginTypeName_0[_UserLoginTypeIndex_0[i]:_UserLoginTypeIndex_0[i+1]]
	case i == 101:
		return _UserLoginTypeName_1
	default:
		return fmt.Sprintf("UserLoginType(%d)", i)
	}
}

// An "invalid array index" compiler error signifies that the constant values have changed.
// Re-run the stringer command to generate them again.
func _UserLoginTypeNoOp() {
	var x [1]struct{}
	_ = x[UserLoginTypeUnknown-(0)]
	_ = x[UserLoginTypeEmail-(1)]
	_ = x[UserLoginTypePhone-(2)]
	_ = x[UserLoginTypeGoogle-(3)]
	_ = x[UserLoginTypeFacebook-(4)]
	_ = x[UserLoginTypeApple-(5)]
	_ = x[UserLoginTypeLine-(6)]
	_ = x[UserLoginTypeDealer-(101)]
}

var _UserLoginTypeValues = []UserLoginType{UserLoginTypeUnknown, UserLoginTypeEmail, UserLoginTypePhone, UserLoginTypeGoogle, UserLoginTypeFacebook, UserLoginTypeApple, UserLoginTypeLine, UserLoginTypeDealer}

var _UserLoginTypeNameToValueMap = map[string]UserLoginType{
	_UserLoginTypeName_0[0:7]:        UserLoginTypeUnknown,
	_UserLoginTypeLowerName_0[0:7]:   UserLoginTypeUnknown,
	_UserLoginTypeName_0[7:12]:       UserLoginTypeEmail,
	_UserLoginTypeLowerName_0[7:12]:  UserLoginTypeEmail,
	_UserLoginTypeName_0[12:17]:      UserLoginTypePhone,
	_UserLoginTypeLowerName_0[12:17]: UserLoginTypePhone,
	_UserLoginTypeName_0[17:23]:      UserLoginTypeGoogle,
	_UserLoginTypeLowerName_0[17:23]: UserLoginTypeGoogle,
	_UserLoginTypeName_0[23:31]:      UserLoginTypeFacebook,
	_UserLoginTypeLowerName_0[23:31]: UserLoginTypeFacebook,
	_UserLoginTypeName_0[31:36]:      UserLoginTypeApple,
	_UserLoginTypeLowerName_0[31:36]: UserLoginTypeApple,
	_UserLoginTypeName_0[36:40]:      UserLoginTypeLine,
	_UserLoginTypeLowerName_0[36:40]: UserLoginTypeLine,
	_UserLoginTypeName_1[0:6]:        UserLoginTypeDealer,
	_UserLoginTypeLowerName_1[0:6]:   UserLoginTypeDealer,
}

var _UserLoginTypeNames = []string{
	_UserLoginTypeName_0[0:7],
	_UserLoginTypeName_0[7:12],
	_UserLoginTypeName_0[12:17],
	_UserLoginTypeName_0[17:23],
	_UserLoginTypeName_0[23:31],
	_UserLoginTypeName_0[31:36],
	_UserLoginTypeName_0[36:40],
	_UserLoginTypeName_1[0:6],
}

// UserLoginTypeString retrieves an enum value from the enum constants string name.
// Throws an error if the param is not part of the enum.
func UserLoginTypeString(s string) (UserLoginType, error) {
	if val, ok := _UserLoginTypeNameToValueMap[s]; ok {
		return val, nil
	}

	if val, ok := _UserLoginTypeNameToValueMap[strings.ToLower(s)]; ok {
		return val, nil
	}
	return 0, fmt.Errorf("%s does not belong to UserLoginType values", s)
}

// UserLoginTypeValues returns all values of the enum
func UserLoginTypeValues() []UserLoginType {
	return _UserLoginTypeValues
}

// UserLoginTypeStrings returns a slice of all String values of the enum
func UserLoginTypeStrings() []string {
	strs := make([]string, len(_UserLoginTypeNames))
	copy(strs, _UserLoginTypeNames)
	return strs
}

// IsAUserLoginType returns "true" if the value is listed in the enum definition. "false" otherwise
func (i UserLoginType) IsAUserLoginType() bool {
	for _, v := range _UserLoginTypeValues {
		if i == v {
			return true
		}
	}
	return false
}

// MarshalJSON implements the json.Marshaler interface for UserLoginType
func (i UserLoginType) MarshalJSON() ([]byte, error) {
	return json.Marshal(i.String())
}

// UnmarshalJSON implements the json.Unmarshaler interface for UserLoginType
func (i *UserLoginType) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return fmt.Errorf("UserLoginType should be a string, got %s", data)
	}

	var err error
	*i, err = UserLoginTypeString(s)
	return err
}

// MarshalText implements the encoding.TextMarshaler interface for UserLoginType
func (i UserLoginType) MarshalText() ([]byte, error) {
	return []byte(i.String()), nil
}

// UnmarshalText implements the encoding.TextUnmarshaler interface for UserLoginType
func (i *UserLoginType) UnmarshalText(text []byte) error {
	var err error
	*i, err = UserLoginTypeString(string(text))
	return err
}

// MarshalYAML implements a YAML Marshaler for UserLoginType
func (i UserLoginType) MarshalYAML() (interface{}, error) {
	return i.String(), nil
}

// UnmarshalYAML implements a YAML Unmarshaler for UserLoginType
func (i *UserLoginType) UnmarshalYAML(unmarshal func(interface{}) error) error {
	var s string
	if err := unmarshal(&s); err != nil {
		return err
	}

	var err error
	*i, err = UserLoginTypeString(s)
	return err
}
