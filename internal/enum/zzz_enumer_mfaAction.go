// Code generated by "enumer -type=MfaAction -trimprefix=MfaAction -yaml -json -text -transform=snake --output=zzz_enumer_mfaAction.go"; DO NOT EDIT.

package enum

import (
	"encoding/json"
	"fmt"
	"strings"
)

const _MfaActionName = "unknown"

var _MfaActionIndex = [...]uint8{0, 7}

const _MfaActionLowerName = "unknown"

func (i MfaAction) String() string {
	i -= 1
	if i >= MfaAction(len(_MfaActionIndex)-1) {
		return fmt.Sprintf("MfaAction(%d)", i+1)
	}
	return _MfaActionName[_MfaActionIndex[i]:_MfaActionIndex[i+1]]
}

// An "invalid array index" compiler error signifies that the constant values have changed.
// Re-run the stringer command to generate them again.
func _MfaActionNoOp() {
	var x [1]struct{}
	_ = x[MfaActionUnknown-(1)]
}

var _MfaActionValues = []MfaAction{MfaActionUnknown}

var _MfaActionNameToValueMap = map[string]MfaAction{
	_MfaActionName[0:7]:      MfaActionUnknown,
	_MfaActionLowerName[0:7]: MfaActionUnknown,
}

var _MfaActionNames = []string{
	_MfaActionName[0:7],
}

// MfaActionString retrieves an enum value from the enum constants string name.
// Throws an error if the param is not part of the enum.
func MfaActionString(s string) (MfaAction, error) {
	if val, ok := _MfaActionNameToValueMap[s]; ok {
		return val, nil
	}

	if val, ok := _MfaActionNameToValueMap[strings.ToLower(s)]; ok {
		return val, nil
	}
	return 0, fmt.Errorf("%s does not belong to MfaAction values", s)
}

// MfaActionValues returns all values of the enum
func MfaActionValues() []MfaAction {
	return _MfaActionValues
}

// MfaActionStrings returns a slice of all String values of the enum
func MfaActionStrings() []string {
	strs := make([]string, len(_MfaActionNames))
	copy(strs, _MfaActionNames)
	return strs
}

// IsAMfaAction returns "true" if the value is listed in the enum definition. "false" otherwise
func (i MfaAction) IsAMfaAction() bool {
	for _, v := range _MfaActionValues {
		if i == v {
			return true
		}
	}
	return false
}

// MarshalJSON implements the json.Marshaler interface for MfaAction
func (i MfaAction) MarshalJSON() ([]byte, error) {
	return json.Marshal(i.String())
}

// UnmarshalJSON implements the json.Unmarshaler interface for MfaAction
func (i *MfaAction) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return fmt.Errorf("MfaAction should be a string, got %s", data)
	}

	var err error
	*i, err = MfaActionString(s)
	return err
}

// MarshalText implements the encoding.TextMarshaler interface for MfaAction
func (i MfaAction) MarshalText() ([]byte, error) {
	return []byte(i.String()), nil
}

// UnmarshalText implements the encoding.TextUnmarshaler interface for MfaAction
func (i *MfaAction) UnmarshalText(text []byte) error {
	var err error
	*i, err = MfaActionString(string(text))
	return err
}

// MarshalYAML implements a YAML Marshaler for MfaAction
func (i MfaAction) MarshalYAML() (interface{}, error) {
	return i.String(), nil
}

// UnmarshalYAML implements a YAML Unmarshaler for MfaAction
func (i *MfaAction) UnmarshalYAML(unmarshal func(interface{}) error) error {
	var s string
	if err := unmarshal(&s); err != nil {
		return err
	}

	var err error
	*i, err = MfaActionString(s)
	return err
}
