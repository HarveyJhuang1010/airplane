// Code generated by "enumer -type=SlackNotifierType -trimprefix=SlackNotifierType -yaml -json -text -transform=snake --output=zzz_enumer_slackNotifierType.go"; DO NOT EDIT.

package enum

import (
	"encoding/json"
	"fmt"
	"strings"
)

const _SlackNotifierTypeName = "unknownrisk_controlfinancesystem"

var _SlackNotifierTypeIndex = [...]uint8{0, 7, 19, 26, 32}

const _SlackNotifierTypeLowerName = "unknownrisk_controlfinancesystem"

func (i SlackNotifierType) String() string {
	if i < 0 || i >= SlackNotifierType(len(_SlackNotifierTypeIndex)-1) {
		return fmt.Sprintf("SlackNotifierType(%d)", i)
	}
	return _SlackNotifierTypeName[_SlackNotifierTypeIndex[i]:_SlackNotifierTypeIndex[i+1]]
}

// An "invalid array index" compiler error signifies that the constant values have changed.
// Re-run the stringer command to generate them again.
func _SlackNotifierTypeNoOp() {
	var x [1]struct{}
	_ = x[SlackNotifierTypeUnknown-(0)]
	_ = x[SlackNotifierTypeRiskControl-(1)]
	_ = x[SlackNotifierTypeFinance-(2)]
	_ = x[SlackNotifierTypeSystem-(3)]
}

var _SlackNotifierTypeValues = []SlackNotifierType{SlackNotifierTypeUnknown, SlackNotifierTypeRiskControl, SlackNotifierTypeFinance, SlackNotifierTypeSystem}

var _SlackNotifierTypeNameToValueMap = map[string]SlackNotifierType{
	_SlackNotifierTypeName[0:7]:        SlackNotifierTypeUnknown,
	_SlackNotifierTypeLowerName[0:7]:   SlackNotifierTypeUnknown,
	_SlackNotifierTypeName[7:19]:       SlackNotifierTypeRiskControl,
	_SlackNotifierTypeLowerName[7:19]:  SlackNotifierTypeRiskControl,
	_SlackNotifierTypeName[19:26]:      SlackNotifierTypeFinance,
	_SlackNotifierTypeLowerName[19:26]: SlackNotifierTypeFinance,
	_SlackNotifierTypeName[26:32]:      SlackNotifierTypeSystem,
	_SlackNotifierTypeLowerName[26:32]: SlackNotifierTypeSystem,
}

var _SlackNotifierTypeNames = []string{
	_SlackNotifierTypeName[0:7],
	_SlackNotifierTypeName[7:19],
	_SlackNotifierTypeName[19:26],
	_SlackNotifierTypeName[26:32],
}

// SlackNotifierTypeString retrieves an enum value from the enum constants string name.
// Throws an error if the param is not part of the enum.
func SlackNotifierTypeString(s string) (SlackNotifierType, error) {
	if val, ok := _SlackNotifierTypeNameToValueMap[s]; ok {
		return val, nil
	}

	if val, ok := _SlackNotifierTypeNameToValueMap[strings.ToLower(s)]; ok {
		return val, nil
	}
	return 0, fmt.Errorf("%s does not belong to SlackNotifierType values", s)
}

// SlackNotifierTypeValues returns all values of the enum
func SlackNotifierTypeValues() []SlackNotifierType {
	return _SlackNotifierTypeValues
}

// SlackNotifierTypeStrings returns a slice of all String values of the enum
func SlackNotifierTypeStrings() []string {
	strs := make([]string, len(_SlackNotifierTypeNames))
	copy(strs, _SlackNotifierTypeNames)
	return strs
}

// IsASlackNotifierType returns "true" if the value is listed in the enum definition. "false" otherwise
func (i SlackNotifierType) IsASlackNotifierType() bool {
	for _, v := range _SlackNotifierTypeValues {
		if i == v {
			return true
		}
	}
	return false
}

// MarshalJSON implements the json.Marshaler interface for SlackNotifierType
func (i SlackNotifierType) MarshalJSON() ([]byte, error) {
	return json.Marshal(i.String())
}

// UnmarshalJSON implements the json.Unmarshaler interface for SlackNotifierType
func (i *SlackNotifierType) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return fmt.Errorf("SlackNotifierType should be a string, got %s", data)
	}

	var err error
	*i, err = SlackNotifierTypeString(s)
	return err
}

// MarshalText implements the encoding.TextMarshaler interface for SlackNotifierType
func (i SlackNotifierType) MarshalText() ([]byte, error) {
	return []byte(i.String()), nil
}

// UnmarshalText implements the encoding.TextUnmarshaler interface for SlackNotifierType
func (i *SlackNotifierType) UnmarshalText(text []byte) error {
	var err error
	*i, err = SlackNotifierTypeString(string(text))
	return err
}

// MarshalYAML implements a YAML Marshaler for SlackNotifierType
func (i SlackNotifierType) MarshalYAML() (interface{}, error) {
	return i.String(), nil
}

// UnmarshalYAML implements a YAML Unmarshaler for SlackNotifierType
func (i *SlackNotifierType) UnmarshalYAML(unmarshal func(interface{}) error) error {
	var s string
	if err := unmarshal(&s); err != nil {
		return err
	}

	var err error
	*i, err = SlackNotifierTypeString(s)
	return err
}
