// Code generated by "enumer -type=UserLoginStatus -trimprefix=UserLoginStatus -yaml -json -text -transform=snake --output=zzz_enumer_userLoginStatus.go"; DO NOT EDIT.

package enum

import (
	"encoding/json"
	"fmt"
	"strings"
)

const _UserLoginStatusName = "disableenable"

var _UserLoginStatusIndex = [...]uint8{0, 7, 13}

const _UserLoginStatusLowerName = "disableenable"

func (i UserLoginStatus) String() string {
	if i < 0 || i >= UserLoginStatus(len(_UserLoginStatusIndex)-1) {
		return fmt.Sprintf("UserLoginStatus(%d)", i)
	}
	return _UserLoginStatusName[_UserLoginStatusIndex[i]:_UserLoginStatusIndex[i+1]]
}

// An "invalid array index" compiler error signifies that the constant values have changed.
// Re-run the stringer command to generate them again.
func _UserLoginStatusNoOp() {
	var x [1]struct{}
	_ = x[UserLoginStatusDisable-(0)]
	_ = x[UserLoginStatusEnable-(1)]
}

var _UserLoginStatusValues = []UserLoginStatus{UserLoginStatusDisable, UserLoginStatusEnable}

var _UserLoginStatusNameToValueMap = map[string]UserLoginStatus{
	_UserLoginStatusName[0:7]:       UserLoginStatusDisable,
	_UserLoginStatusLowerName[0:7]:  UserLoginStatusDisable,
	_UserLoginStatusName[7:13]:      UserLoginStatusEnable,
	_UserLoginStatusLowerName[7:13]: UserLoginStatusEnable,
}

var _UserLoginStatusNames = []string{
	_UserLoginStatusName[0:7],
	_UserLoginStatusName[7:13],
}

// UserLoginStatusString retrieves an enum value from the enum constants string name.
// Throws an error if the param is not part of the enum.
func UserLoginStatusString(s string) (UserLoginStatus, error) {
	if val, ok := _UserLoginStatusNameToValueMap[s]; ok {
		return val, nil
	}

	if val, ok := _UserLoginStatusNameToValueMap[strings.ToLower(s)]; ok {
		return val, nil
	}
	return 0, fmt.Errorf("%s does not belong to UserLoginStatus values", s)
}

// UserLoginStatusValues returns all values of the enum
func UserLoginStatusValues() []UserLoginStatus {
	return _UserLoginStatusValues
}

// UserLoginStatusStrings returns a slice of all String values of the enum
func UserLoginStatusStrings() []string {
	strs := make([]string, len(_UserLoginStatusNames))
	copy(strs, _UserLoginStatusNames)
	return strs
}

// IsAUserLoginStatus returns "true" if the value is listed in the enum definition. "false" otherwise
func (i UserLoginStatus) IsAUserLoginStatus() bool {
	for _, v := range _UserLoginStatusValues {
		if i == v {
			return true
		}
	}
	return false
}

// MarshalJSON implements the json.Marshaler interface for UserLoginStatus
func (i UserLoginStatus) MarshalJSON() ([]byte, error) {
	return json.Marshal(i.String())
}

// UnmarshalJSON implements the json.Unmarshaler interface for UserLoginStatus
func (i *UserLoginStatus) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return fmt.Errorf("UserLoginStatus should be a string, got %s", data)
	}

	var err error
	*i, err = UserLoginStatusString(s)
	return err
}

// MarshalText implements the encoding.TextMarshaler interface for UserLoginStatus
func (i UserLoginStatus) MarshalText() ([]byte, error) {
	return []byte(i.String()), nil
}

// UnmarshalText implements the encoding.TextUnmarshaler interface for UserLoginStatus
func (i *UserLoginStatus) UnmarshalText(text []byte) error {
	var err error
	*i, err = UserLoginStatusString(string(text))
	return err
}

// MarshalYAML implements a YAML Marshaler for UserLoginStatus
func (i UserLoginStatus) MarshalYAML() (interface{}, error) {
	return i.String(), nil
}

// UnmarshalYAML implements a YAML Unmarshaler for UserLoginStatus
func (i *UserLoginStatus) UnmarshalYAML(unmarshal func(interface{}) error) error {
	var s string
	if err := unmarshal(&s); err != nil {
		return err
	}

	var err error
	*i, err = UserLoginStatusString(s)
	return err
}
