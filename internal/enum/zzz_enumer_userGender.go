// Code generated by "enumer -type=UserGender -trimprefix=UserGender -yaml -json -text -transform=snake --output=zzz_enumer_userGender.go"; DO NOT EDIT.

package enum

import (
	"encoding/json"
	"fmt"
	"strings"
)

const _UserGenderName = "unknownmalefemale"

var _UserGenderIndex = [...]uint8{0, 7, 11, 17}

const _UserGenderLowerName = "unknownmalefemale"

func (i UserGender) String() string {
	if i < 0 || i >= UserGender(len(_UserGenderIndex)-1) {
		return fmt.Sprintf("UserGender(%d)", i)
	}
	return _UserGenderName[_UserGenderIndex[i]:_UserGenderIndex[i+1]]
}

// An "invalid array index" compiler error signifies that the constant values have changed.
// Re-run the stringer command to generate them again.
func _UserGenderNoOp() {
	var x [1]struct{}
	_ = x[UserGenderUnknown-(0)]
	_ = x[UserGenderMale-(1)]
	_ = x[UserGenderFemale-(2)]
}

var _UserGenderValues = []UserGender{UserGenderUnknown, UserGenderMale, UserGenderFemale}

var _UserGenderNameToValueMap = map[string]UserGender{
	_UserGenderName[0:7]:        UserGenderUnknown,
	_UserGenderLowerName[0:7]:   UserGenderUnknown,
	_UserGenderName[7:11]:       UserGenderMale,
	_UserGenderLowerName[7:11]:  UserGenderMale,
	_UserGenderName[11:17]:      UserGenderFemale,
	_UserGenderLowerName[11:17]: UserGenderFemale,
}

var _UserGenderNames = []string{
	_UserGenderName[0:7],
	_UserGenderName[7:11],
	_UserGenderName[11:17],
}

// UserGenderString retrieves an enum value from the enum constants string name.
// Throws an error if the param is not part of the enum.
func UserGenderString(s string) (UserGender, error) {
	if val, ok := _UserGenderNameToValueMap[s]; ok {
		return val, nil
	}

	if val, ok := _UserGenderNameToValueMap[strings.ToLower(s)]; ok {
		return val, nil
	}
	return 0, fmt.Errorf("%s does not belong to UserGender values", s)
}

// UserGenderValues returns all values of the enum
func UserGenderValues() []UserGender {
	return _UserGenderValues
}

// UserGenderStrings returns a slice of all String values of the enum
func UserGenderStrings() []string {
	strs := make([]string, len(_UserGenderNames))
	copy(strs, _UserGenderNames)
	return strs
}

// IsAUserGender returns "true" if the value is listed in the enum definition. "false" otherwise
func (i UserGender) IsAUserGender() bool {
	for _, v := range _UserGenderValues {
		if i == v {
			return true
		}
	}
	return false
}

// MarshalJSON implements the json.Marshaler interface for UserGender
func (i UserGender) MarshalJSON() ([]byte, error) {
	return json.Marshal(i.String())
}

// UnmarshalJSON implements the json.Unmarshaler interface for UserGender
func (i *UserGender) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return fmt.Errorf("UserGender should be a string, got %s", data)
	}

	var err error
	*i, err = UserGenderString(s)
	return err
}

// MarshalText implements the encoding.TextMarshaler interface for UserGender
func (i UserGender) MarshalText() ([]byte, error) {
	return []byte(i.String()), nil
}

// UnmarshalText implements the encoding.TextUnmarshaler interface for UserGender
func (i *UserGender) UnmarshalText(text []byte) error {
	var err error
	*i, err = UserGenderString(string(text))
	return err
}

// MarshalYAML implements a YAML Marshaler for UserGender
func (i UserGender) MarshalYAML() (interface{}, error) {
	return i.String(), nil
}

// UnmarshalYAML implements a YAML Unmarshaler for UserGender
func (i *UserGender) UnmarshalYAML(unmarshal func(interface{}) error) error {
	var s string
	if err := unmarshal(&s); err != nil {
		return err
	}

	var err error
	*i, err = UserGenderString(s)
	return err
}
