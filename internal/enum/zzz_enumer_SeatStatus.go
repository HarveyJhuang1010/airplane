// Code generated by "enumer -type=SeatStatus -trimprefix=SeatStatus -yaml -json -text -transform=snake --output=zzz_enumer_SeatStatus.go"; DO NOT EDIT.

package enum

import (
	"encoding/json"
	"fmt"
	"strings"
)

const _SeatStatusName = "availableheldbooked"

var _SeatStatusIndex = [...]uint8{0, 9, 13, 19}

const _SeatStatusLowerName = "availableheldbooked"

func (i SeatStatus) String() string {
	if i < 0 || i >= SeatStatus(len(_SeatStatusIndex)-1) {
		return fmt.Sprintf("SeatStatus(%d)", i)
	}
	return _SeatStatusName[_SeatStatusIndex[i]:_SeatStatusIndex[i+1]]
}

// An "invalid array index" compiler error signifies that the constant values have changed.
// Re-run the stringer command to generate them again.
func _SeatStatusNoOp() {
	var x [1]struct{}
	_ = x[SeatStatusAvailable-(0)]
	_ = x[SeatStatusHeld-(1)]
	_ = x[SeatStatusBooked-(2)]
}

var _SeatStatusValues = []SeatStatus{SeatStatusAvailable, SeatStatusHeld, SeatStatusBooked}

var _SeatStatusNameToValueMap = map[string]SeatStatus{
	_SeatStatusName[0:9]:        SeatStatusAvailable,
	_SeatStatusLowerName[0:9]:   SeatStatusAvailable,
	_SeatStatusName[9:13]:       SeatStatusHeld,
	_SeatStatusLowerName[9:13]:  SeatStatusHeld,
	_SeatStatusName[13:19]:      SeatStatusBooked,
	_SeatStatusLowerName[13:19]: SeatStatusBooked,
}

var _SeatStatusNames = []string{
	_SeatStatusName[0:9],
	_SeatStatusName[9:13],
	_SeatStatusName[13:19],
}

// SeatStatusString retrieves an enum value from the enum constants string name.
// Throws an error if the param is not part of the enum.
func SeatStatusString(s string) (SeatStatus, error) {
	if val, ok := _SeatStatusNameToValueMap[s]; ok {
		return val, nil
	}

	if val, ok := _SeatStatusNameToValueMap[strings.ToLower(s)]; ok {
		return val, nil
	}
	return 0, fmt.Errorf("%s does not belong to SeatStatus values", s)
}

// SeatStatusValues returns all values of the enum
func SeatStatusValues() []SeatStatus {
	return _SeatStatusValues
}

// SeatStatusStrings returns a slice of all String values of the enum
func SeatStatusStrings() []string {
	strs := make([]string, len(_SeatStatusNames))
	copy(strs, _SeatStatusNames)
	return strs
}

// IsASeatStatus returns "true" if the value is listed in the enum definition. "false" otherwise
func (i SeatStatus) IsASeatStatus() bool {
	for _, v := range _SeatStatusValues {
		if i == v {
			return true
		}
	}
	return false
}

// MarshalJSON implements the json.Marshaler interface for SeatStatus
func (i SeatStatus) MarshalJSON() ([]byte, error) {
	return json.Marshal(i.String())
}

// UnmarshalJSON implements the json.Unmarshaler interface for SeatStatus
func (i *SeatStatus) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return fmt.Errorf("SeatStatus should be a string, got %s", data)
	}

	var err error
	*i, err = SeatStatusString(s)
	return err
}

// MarshalText implements the encoding.TextMarshaler interface for SeatStatus
func (i SeatStatus) MarshalText() ([]byte, error) {
	return []byte(i.String()), nil
}

// UnmarshalText implements the encoding.TextUnmarshaler interface for SeatStatus
func (i *SeatStatus) UnmarshalText(text []byte) error {
	var err error
	*i, err = SeatStatusString(string(text))
	return err
}

// MarshalYAML implements a YAML Marshaler for SeatStatus
func (i SeatStatus) MarshalYAML() (interface{}, error) {
	return i.String(), nil
}

// UnmarshalYAML implements a YAML Unmarshaler for SeatStatus
func (i *SeatStatus) UnmarshalYAML(unmarshal func(interface{}) error) error {
	var s string
	if err := unmarshal(&s); err != nil {
		return err
	}

	var err error
	*i, err = SeatStatusString(s)
	return err
}
