// Code generated by "enumer -type=PaymentMethod -trimprefix=PaymentMethod -yaml -json -text -transform=snake --output=zzz_enumer_PaymentMethod.go"; DO NOT EDIT.

package enum

import (
	"encoding/json"
	"fmt"
	"strings"
)

const _PaymentMethodName = "credit_carddebit_cardbank_transfer"

var _PaymentMethodIndex = [...]uint8{0, 11, 21, 34}

const _PaymentMethodLowerName = "credit_carddebit_cardbank_transfer"

func (i PaymentMethod) String() string {
	if i < 0 || i >= PaymentMethod(len(_PaymentMethodIndex)-1) {
		return fmt.Sprintf("PaymentMethod(%d)", i)
	}
	return _PaymentMethodName[_PaymentMethodIndex[i]:_PaymentMethodIndex[i+1]]
}

// An "invalid array index" compiler error signifies that the constant values have changed.
// Re-run the stringer command to generate them again.
func _PaymentMethodNoOp() {
	var x [1]struct{}
	_ = x[PaymentMethodCreditCard-(0)]
	_ = x[PaymentMethodDebitCard-(1)]
	_ = x[PaymentMethodBankTransfer-(2)]
}

var _PaymentMethodValues = []PaymentMethod{PaymentMethodCreditCard, PaymentMethodDebitCard, PaymentMethodBankTransfer}

var _PaymentMethodNameToValueMap = map[string]PaymentMethod{
	_PaymentMethodName[0:11]:       PaymentMethodCreditCard,
	_PaymentMethodLowerName[0:11]:  PaymentMethodCreditCard,
	_PaymentMethodName[11:21]:      PaymentMethodDebitCard,
	_PaymentMethodLowerName[11:21]: PaymentMethodDebitCard,
	_PaymentMethodName[21:34]:      PaymentMethodBankTransfer,
	_PaymentMethodLowerName[21:34]: PaymentMethodBankTransfer,
}

var _PaymentMethodNames = []string{
	_PaymentMethodName[0:11],
	_PaymentMethodName[11:21],
	_PaymentMethodName[21:34],
}

// PaymentMethodString retrieves an enum value from the enum constants string name.
// Throws an error if the param is not part of the enum.
func PaymentMethodString(s string) (PaymentMethod, error) {
	if val, ok := _PaymentMethodNameToValueMap[s]; ok {
		return val, nil
	}

	if val, ok := _PaymentMethodNameToValueMap[strings.ToLower(s)]; ok {
		return val, nil
	}
	return 0, fmt.Errorf("%s does not belong to PaymentMethod values", s)
}

// PaymentMethodValues returns all values of the enum
func PaymentMethodValues() []PaymentMethod {
	return _PaymentMethodValues
}

// PaymentMethodStrings returns a slice of all String values of the enum
func PaymentMethodStrings() []string {
	strs := make([]string, len(_PaymentMethodNames))
	copy(strs, _PaymentMethodNames)
	return strs
}

// IsAPaymentMethod returns "true" if the value is listed in the enum definition. "false" otherwise
func (i PaymentMethod) IsAPaymentMethod() bool {
	for _, v := range _PaymentMethodValues {
		if i == v {
			return true
		}
	}
	return false
}

// MarshalJSON implements the json.Marshaler interface for PaymentMethod
func (i PaymentMethod) MarshalJSON() ([]byte, error) {
	return json.Marshal(i.String())
}

// UnmarshalJSON implements the json.Unmarshaler interface for PaymentMethod
func (i *PaymentMethod) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return fmt.Errorf("PaymentMethod should be a string, got %s", data)
	}

	var err error
	*i, err = PaymentMethodString(s)
	return err
}

// MarshalText implements the encoding.TextMarshaler interface for PaymentMethod
func (i PaymentMethod) MarshalText() ([]byte, error) {
	return []byte(i.String()), nil
}

// UnmarshalText implements the encoding.TextUnmarshaler interface for PaymentMethod
func (i *PaymentMethod) UnmarshalText(text []byte) error {
	var err error
	*i, err = PaymentMethodString(string(text))
	return err
}

// MarshalYAML implements a YAML Marshaler for PaymentMethod
func (i PaymentMethod) MarshalYAML() (interface{}, error) {
	return i.String(), nil
}

// UnmarshalYAML implements a YAML Unmarshaler for PaymentMethod
func (i *PaymentMethod) UnmarshalYAML(unmarshal func(interface{}) error) error {
	var s string
	if err := unmarshal(&s); err != nil {
		return err
	}

	var err error
	*i, err = PaymentMethodString(s)
	return err
}
