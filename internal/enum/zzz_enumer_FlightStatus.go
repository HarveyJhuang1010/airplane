// Code generated by "enumer -type=FlightStatus -trimprefix=FlightStatus -yaml -json -text -sql -transform=snake --output=zzz_enumer_FlightStatus.go"; DO NOT EDIT.

package enum

import (
	"database/sql/driver"
	"encoding/json"
	"fmt"
	"strings"
)

const _FlightStatusName = "scheduledboardingdepartedarrivedcancelled"

var _FlightStatusIndex = [...]uint8{0, 9, 17, 25, 32, 41}

const _FlightStatusLowerName = "scheduledboardingdepartedarrivedcancelled"

func (i FlightStatus) String() string {
	if i < 0 || i >= FlightStatus(len(_FlightStatusIndex)-1) {
		return fmt.Sprintf("FlightStatus(%d)", i)
	}
	return _FlightStatusName[_FlightStatusIndex[i]:_FlightStatusIndex[i+1]]
}

// An "invalid array index" compiler error signifies that the constant values have changed.
// Re-run the stringer command to generate them again.
func _FlightStatusNoOp() {
	var x [1]struct{}
	_ = x[FlightStatusScheduled-(0)]
	_ = x[FlightStatusBoarding-(1)]
	_ = x[FlightStatusDeparted-(2)]
	_ = x[FlightStatusArrived-(3)]
	_ = x[FlightStatusCancelled-(4)]
}

var _FlightStatusValues = []FlightStatus{FlightStatusScheduled, FlightStatusBoarding, FlightStatusDeparted, FlightStatusArrived, FlightStatusCancelled}

var _FlightStatusNameToValueMap = map[string]FlightStatus{
	_FlightStatusName[0:9]:        FlightStatusScheduled,
	_FlightStatusLowerName[0:9]:   FlightStatusScheduled,
	_FlightStatusName[9:17]:       FlightStatusBoarding,
	_FlightStatusLowerName[9:17]:  FlightStatusBoarding,
	_FlightStatusName[17:25]:      FlightStatusDeparted,
	_FlightStatusLowerName[17:25]: FlightStatusDeparted,
	_FlightStatusName[25:32]:      FlightStatusArrived,
	_FlightStatusLowerName[25:32]: FlightStatusArrived,
	_FlightStatusName[32:41]:      FlightStatusCancelled,
	_FlightStatusLowerName[32:41]: FlightStatusCancelled,
}

var _FlightStatusNames = []string{
	_FlightStatusName[0:9],
	_FlightStatusName[9:17],
	_FlightStatusName[17:25],
	_FlightStatusName[25:32],
	_FlightStatusName[32:41],
}

// FlightStatusString retrieves an enum value from the enum constants string name.
// Throws an error if the param is not part of the enum.
func FlightStatusString(s string) (FlightStatus, error) {
	if val, ok := _FlightStatusNameToValueMap[s]; ok {
		return val, nil
	}

	if val, ok := _FlightStatusNameToValueMap[strings.ToLower(s)]; ok {
		return val, nil
	}
	return 0, fmt.Errorf("%s does not belong to FlightStatus values", s)
}

// FlightStatusValues returns all values of the enum
func FlightStatusValues() []FlightStatus {
	return _FlightStatusValues
}

// FlightStatusStrings returns a slice of all String values of the enum
func FlightStatusStrings() []string {
	strs := make([]string, len(_FlightStatusNames))
	copy(strs, _FlightStatusNames)
	return strs
}

// IsAFlightStatus returns "true" if the value is listed in the enum definition. "false" otherwise
func (i FlightStatus) IsAFlightStatus() bool {
	for _, v := range _FlightStatusValues {
		if i == v {
			return true
		}
	}
	return false
}

// MarshalJSON implements the json.Marshaler interface for FlightStatus
func (i FlightStatus) MarshalJSON() ([]byte, error) {
	return json.Marshal(i.String())
}

// UnmarshalJSON implements the json.Unmarshaler interface for FlightStatus
func (i *FlightStatus) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return fmt.Errorf("FlightStatus should be a string, got %s", data)
	}

	var err error
	*i, err = FlightStatusString(s)
	return err
}

// MarshalText implements the encoding.TextMarshaler interface for FlightStatus
func (i FlightStatus) MarshalText() ([]byte, error) {
	return []byte(i.String()), nil
}

// UnmarshalText implements the encoding.TextUnmarshaler interface for FlightStatus
func (i *FlightStatus) UnmarshalText(text []byte) error {
	var err error
	*i, err = FlightStatusString(string(text))
	return err
}

// MarshalYAML implements a YAML Marshaler for FlightStatus
func (i FlightStatus) MarshalYAML() (interface{}, error) {
	return i.String(), nil
}

// UnmarshalYAML implements a YAML Unmarshaler for FlightStatus
func (i *FlightStatus) UnmarshalYAML(unmarshal func(interface{}) error) error {
	var s string
	if err := unmarshal(&s); err != nil {
		return err
	}

	var err error
	*i, err = FlightStatusString(s)
	return err
}

func (i FlightStatus) Value() (driver.Value, error) {
	return i.String(), nil
}

func (i *FlightStatus) Scan(value interface{}) error {
	if value == nil {
		return nil
	}

	var str string
	switch v := value.(type) {
	case []byte:
		str = string(v)
	case string:
		str = v
	case fmt.Stringer:
		str = v.String()
	default:
		return fmt.Errorf("invalid value of FlightStatus: %[1]T(%[1]v)", value)
	}

	val, err := FlightStatusString(str)
	if err != nil {
		return err
	}

	*i = val
	return nil
}
