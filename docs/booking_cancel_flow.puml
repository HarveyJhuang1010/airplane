@startuml
actor User
User -> BookingService: CancelBooking
activate BookingService

BookingService -> BookingDAO: Get(booking.ID)
activate BookingDAO
BookingDAO -> BookingService: Return booking
deactivate BookingDAO

alt Status is Confirmed, Overbooked
    BookingService -> PaymentService: RefundPayment(booking.ID)
    activate PaymentService
    PaymentService -> BookingService: Refund Success
    deactivate PaymentService

    BookingService -> CabinClassDAO: Get(booking.CabinClassID)
    activate CabinClassDAO
    CabinClassDAO -> BookingService: Return class
    deactivate CabinClassDAO

    BookingService -> CabinClassDAO: Update(class.RemainSeats++)
    activate CabinClassDAO
    CabinClassDAO -> BookingService: Updated
    deactivate CabinClassDAO

    BookingService -> OverBookingService: HandleOverBooking(booking.FlightID)
    activate OverBookingService
    OverBookingService -> BookingService: OverBooking Handled
    deactivate OverBookingService

    opt Seat exists
        BookingService -> SeatDAO: Update(Seat.Status to Held)
        activate SeatDAO
        SeatDAO -> BookingService: Updated
        deactivate SeatDAO
    end
else Status is not Confirmed/Overbooked
    BookingService -> PaymentService: CancelPayment(booking.ID)
    activate PaymentService
    PaymentService -> BookingService: Cancel Success
    deactivate PaymentService
end

BookingService -> BookingDAO: UpdateStatus(booking.ID, Cancelling)
activate BookingDAO
BookingDAO -> BookingService: Updated
deactivate BookingDAO

BookingService -> FlightDAO: Get(booking.FlightID)
activate FlightDAO
FlightDAO -> BookingService: Return flight
deactivate FlightDAO

BookingService -> FlightDAO: UpdateSellableSeats(flight.SellableSeats++)
activate FlightDAO
FlightDAO -> BookingService: Updated
deactivate FlightDAO

BookingService -> User: Booking Cancelled Successfully
deactivate BookingService
@enduml
